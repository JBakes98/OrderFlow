name: Deploy to ECS

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'ECR Image tag to deploy'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Update ECS service
        run: |
          # Get the current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ vars.TASK_DEFINITION }} --query taskDefinition)
          
          # Update the image in the task definition
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ github.event.inputs.image_tag }}" '.containerDefinitions[0].image = $IMAGE')
          
          # Register the new task definition
          NEW_TASK_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION" --query taskDefinition.taskDefinitionArn --output text)
          
          # Update the service to use the new task definition
          aws ecs update-service --cluster ${{ vars.ECS_CLUSTER }} --service ${{ vars.ECS_SERVICE }} --task-definition $NEW_TASK_ARN

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable --cluster ${{ vars.ECS_CLUSTER }} --services ${{ vars.ECS_SERVICE }}

      - name: Deployment summary
        run: |
          echo "Deployed image ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ github.event.inputs.image_tag }} to ECS service ${{ vars.ECS_SERVICE }}"